{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"APIStatus": {
				"enum": [
					"success",
					"warning",
					"error"
				],
				"type": "string"
			},
			"ObjectId": {
				"description": "A class representation of the BSON ObjectId type.",
				"properties": {
					"generationTime": {
						"type": "number",
						"format": "double",
						"description": "The generation time of this ObjectId instance"
					}
				},
				"required": [
					"generationTime"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserRole": {
				"enum": [
					"admin",
					"user"
				],
				"type": "string"
			},
			"Dictionary": {
				"properties": {},
				"additionalProperties": {},
				"type": "object"
			},
			"Collection_any.any_": {
				"items": {
					"$ref": "#/components/schemas/Dictionary"
				},
				"type": "array"
			},
			"User": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"id": {
						"type": "string"
					},
					"first": {
						"type": "string"
					},
					"last": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"venmo": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"isBeeping": {
						"type": "boolean",
						"default": false
					},
					"isEmailVerified": {
						"type": "boolean",
						"default": false
					},
					"isStudent": {
						"type": "boolean",
						"default": false
					},
					"groupRate": {
						"type": "number",
						"format": "double",
						"default": 4
					},
					"singlesRate": {
						"type": "number",
						"format": "double",
						"default": 3
					},
					"capacity": {
						"type": "number",
						"format": "double",
						"default": 4
					},
					"masksRequired": {
						"type": "boolean",
						"default": false
					},
					"queueSize": {
						"type": "number",
						"format": "double",
						"default": 0
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					},
					"pushToken": {
						"type": "string"
					},
					"photoUrl": {
						"type": "string"
					},
					"queue": {
						"$ref": "#/components/schemas/Collection_any.any_"
					}
				},
				"required": [
					"_id",
					"id",
					"first",
					"last",
					"username",
					"email",
					"phone",
					"venmo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenData": {
				"properties": {
					"userid": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"token": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"tokenid": {
						"$ref": "#/components/schemas/ObjectId"
					}
				},
				"required": [
					"token",
					"tokenid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoginResponse": {
				"description": "Login Response",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					},
					"tokens": {
						"$ref": "#/components/schemas/TokenData"
					}
				},
				"required": [
					"status",
					"user",
					"tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"APIResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"message": {}
				},
				"required": [
					"status",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoginParams": {
				"description": "Login Parameters",
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"expoPushToken": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SignUpParams": {
				"description": "Sign Up Parameters",
				"properties": {
					"first": {
						"type": "string"
					},
					"last": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"venmo": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"expoPushToken": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"first",
					"last",
					"email",
					"phone",
					"venmo",
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogoutParams": {
				"description": "Logout Parameters",
				"properties": {
					"isApp": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false,
				"example": {
					"isApp": true
				}
			},
			"RemoveTokenParams": {
				"description": "Push Token Parameters",
				"properties": {
					"tokenid": {
						"type": "string"
					}
				},
				"required": [
					"tokenid"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"tokenid": "22192b90-54f8-49b5-9dcf-26049454716b"
				}
			},
			"ForgotPasswordParams": {
				"description": "Forgot Password Parameters",
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordParams": {
				"description": "Reset Password Parameters",
				"properties": {
					"id": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"password"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "22192b90-54f8-49b5-9dcf-26049454716b",
					"password": "7632bf6w9wfdb6qqfigyr6"
				}
			},
			"SetBeeperStatusParams": {
				"description": "Set Beeprs Status Paramaters",
				"properties": {
					"singlesRate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						]
					},
					"groupRate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						]
					},
					"capacity": {
						"type": "number",
						"format": "double"
					},
					"isBeeping": {
						"type": "boolean"
					},
					"masksRequired": {
						"type": "boolean"
					}
				},
				"required": [
					"singlesRate",
					"groupRate",
					"capacity",
					"isBeeping",
					"masksRequired"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"isBeeping": true,
					"singlesRate": "3",
					"groupRate": "2",
					"capacity": "4",
					"masksRequired": true
				}
			},
			"QueueEntry": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"id": {
						"type": "string"
					},
					"origin": {
						"type": "string"
					},
					"destination": {
						"type": "string"
					},
					"state": {
						"type": "number",
						"format": "double",
						"default": 0
					},
					"isAccepted": {
						"type": "boolean"
					},
					"groupSize": {
						"type": "number",
						"format": "double"
					},
					"timeEnteredQueue": {
						"type": "number",
						"format": "double"
					},
					"beeper": {
						"$ref": "#/components/schemas/User"
					},
					"rider": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"_id",
					"id",
					"origin",
					"destination",
					"isAccepted",
					"groupSize",
					"timeEnteredQueue",
					"beeper",
					"rider"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetBeeperQueueResult": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"queue": {
						"items": {
							"$ref": "#/components/schemas/QueueEntry"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"queue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SetBeeperQueueParams": {
				"description": "Set Beepers Queue Params",
				"properties": {
					"value": {
						"type": "string"
					},
					"riderID": {
						"type": "string"
					},
					"queueID": {
						"type": "string"
					}
				},
				"required": [
					"value",
					"riderID",
					"queueID"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"value": "accept",
					"queueID": "b500bb45-094e-437c-887b-e6b6d815ba12",
					"riderID": "22192b90-54f8-49b5-9dcf-26049454716b"
				}
			},
			"Beep": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"id": {
						"type": "string"
					},
					"beeper": {
						"$ref": "#/components/schemas/User"
					},
					"rider": {
						"$ref": "#/components/schemas/User"
					},
					"origin": {
						"type": "string"
					},
					"destination": {
						"type": "string"
					},
					"state": {
						"type": "number",
						"format": "double"
					},
					"isAccepted": {
						"type": "boolean"
					},
					"groupSize": {
						"type": "number",
						"format": "double"
					},
					"timeEnteredQueue": {
						"type": "number",
						"format": "double"
					},
					"doneTime": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"_id",
					"id",
					"beeper",
					"rider",
					"origin",
					"destination",
					"state",
					"isAccepted",
					"groupSize",
					"doneTime"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BeepsResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"beeps": {
						"items": {
							"$ref": "#/components/schemas/Beep"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"total",
					"beeps"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BeepResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"beep": {
						"$ref": "#/components/schemas/Beep"
					}
				},
				"required": [
					"status",
					"beep"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProfilePhotoResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"url": {
						"type": "string"
					}
				},
				"required": [
					"status",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReportUserParams": {
				"description": "Example of a submitted report",
				"properties": {
					"id": {
						"type": "string"
					},
					"reason": {
						"type": "string"
					},
					"beep": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"reason"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "0c4dd21b-54bc-4e51-bed7-a7fd1ade00fe",
					"reason": "this user is an asshole"
				}
			},
			"Report": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/ObjectId"
					},
					"id": {
						"type": "string"
					},
					"reporter": {
						"$ref": "#/components/schemas/User"
					},
					"reported": {
						"$ref": "#/components/schemas/User"
					},
					"handledBy": {
						"$ref": "#/components/schemas/User"
					},
					"reason": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"handled": {
						"type": "boolean"
					},
					"beep": {
						"$ref": "#/components/schemas/Beep"
					}
				},
				"required": [
					"_id",
					"id",
					"reporter",
					"reported",
					"reason",
					"handled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReportsResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"reports": {
						"items": {
							"$ref": "#/components/schemas/Report"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"total",
					"reports"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateReportParams": {
				"description": "Update a Report",
				"properties": {
					"notes": {
						"type": "string"
					},
					"handled": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false,
				"example": {
					"adminNotes": "Guy was mad at other guy for eating in his Tacoma",
					"handled": true
				}
			},
			"ReportResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"report": {
						"$ref": "#/components/schemas/Report"
					}
				},
				"required": [
					"status",
					"report"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChooseBeepResponse": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"beeper": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"beeper"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChooseBeepParams": {
				"description": "Choose Beep Params",
				"properties": {
					"groupSize": {
						"type": "number",
						"format": "double"
					},
					"origin": {
						"type": "string"
					},
					"destination": {
						"type": "string"
					},
					"beepersID": {
						"type": "string"
					}
				},
				"required": [
					"groupSize",
					"origin",
					"destination",
					"beepersID"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"origin": "397 Perkinsville Dr Perkinsville Drive Boone, North Carolina 28607",
					"destination": "Test",
					"groupSize": "1",
					"beepersID": "22192b90-54f8-49b5-9dcf-26049454716b"
				}
			},
			"RiderStatusResult": {
				"description": "Rider Status Response",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"groupSize": {
						"type": "number",
						"format": "double"
					},
					"isAccepted": {
						"type": "boolean"
					},
					"ridersQueuePosition": {
						"type": "number",
						"format": "double"
					},
					"state": {
						"type": "number",
						"format": "double"
					},
					"beeper": {
						"$ref": "#/components/schemas/User"
					},
					"origin": {
						"type": "string"
					},
					"destination": {
						"type": "string"
					}
				},
				"required": [
					"status",
					"groupSize",
					"isAccepted",
					"beeper",
					"origin",
					"destination"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"status": "success",
					"groupSize": 1,
					"isAccepted": true,
					"ridersQueuePosition": 0,
					"state": 0,
					"beeper": {
						"id": "22192b90-54f8-49b5-9dcf-26049454716b",
						"first": "Banks",
						"last": "Nussman",
						"phone": "7049968597",
						"venmo": "banksnussman",
						"queueSize": 1,
						"singlesRate": "3",
						"groupRate": "2",
						"capacity": 4,
						"userLevel": 0,
						"isStudent": true,
						"masksRequired": true
					}
				}
			},
			"BeeperListResult": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"beepers": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"beepers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResult": {
				"description": "Public User Result",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"status": "success",
					"user": {
						"capacity": 4,
						"first": "Test",
						"groupRate": "2",
						"isBeeping": false,
						"isStudent": false,
						"last": "User",
						"masksRequired": true,
						"queueSize": 0,
						"singlesRate": "3",
						"venmo": "testuser"
					}
				}
			},
			"EditUserParams": {
				"description": "Edit User Params",
				"properties": {
					"first": {
						"type": "string"
					},
					"last": {
						"type": "string"
					},
					"capacity": {
						"type": "number",
						"format": "double"
					},
					"isStudent": {
						"type": "boolean"
					},
					"masksRequired": {
						"type": "boolean"
					},
					"queueSize": {
						"type": "number",
						"format": "double"
					},
					"singlesRate": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string"
							}
						]
					},
					"groupRate": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string"
							}
						]
					},
					"venmo": {
						"type": "string"
					},
					"isBeeping": {
						"type": "boolean"
					},
					"photoUrl": {
						"type": "string",
						"nullable": true
					},
					"id": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"inQueueOfUserID": {
						"type": "string",
						"nullable": true
					},
					"isEmailVerified": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"pushToken": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"userLevel": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false,
				"example": {
					"venmo": "bankstestvenmo",
					"first": "Banks"
				}
			},
			"UsersResult": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"total",
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RiderHistoryResult": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Beep"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BeeperHistoryResult": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Beep"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EditAccountParams": {
				"description": "Edit User Account Paramaters",
				"properties": {
					"first": {
						"type": "string"
					},
					"last": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"venmo": {
						"type": "string"
					}
				},
				"required": [
					"first",
					"last",
					"email",
					"phone",
					"venmo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChangePasswordParams": {
				"description": "Change Password Paramaters",
				"properties": {
					"password": {
						"type": "string"
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"password": "879f7a7fj6178bdafjk732vj1s9x"
				}
			},
			"UpdatePushTokenParams": {
				"description": "Update Expo Push Token",
				"properties": {
					"expoPushToken": {
						"type": "string"
					}
				},
				"required": [
					"expoPushToken"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"expoPushToken": "ExponentPushToken[xv1qZtFzJY_yVFHK-dmWlN]"
				}
			},
			"EmailData": {
				"description": "Data about a user's email",
				"properties": {
					"isEmailVerified": {
						"type": "boolean"
					},
					"isStudent": {
						"type": "boolean"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"isEmailVerified",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountResult": {
				"description": "Result of Verifiying your account",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/APIStatus"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/EmailData"
					}
				},
				"required": [
					"status",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountParams": {
				"description": "When user POSTs to verify their account, they need to send the\nid of the verify entry",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "22192b90-54f8-49b5-9dcf-26049454716b"
				}
			}
		},
		"securitySchemes": {
			"token": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "beep-api",
		"version": "1.0.0",
		"description": "REST API for the Beep App in Typescript",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Banks Nussman"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/LoginResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Checks provided credentials and provides a responce with user data and authentication tokens.\nProvide a username and password to login successfully",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Conatins a username and password and optional Expo push token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginParams"
							}
						}
					}
				}
			}
		},
		"/auth/signup": {
			"post": {
				"operationId": "Signup",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/LoginResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Signs Up a user with the provided data. \nProvide all required signup paramaters to get a new account.\nThis endpoint will return the same thing login would asuming signup was successful.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Conatins a signup params and optional Expo push token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignUpParams"
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"operationId": "Logout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Logs out a user.  \nThis allows us to invalidate a user's authentication token upon logout",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Param of isApp allows us to remove current pushToken if user is in the app, otheriwse don't remove it because it was a logout on the website",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogoutParams"
							}
						}
					}
				}
			}
		},
		"/auth/token": {
			"post": {
				"operationId": "RemoveToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Removes any tokenid  \nIf user's device was offline upon logout, a tokenid was kept in storage. This endpoint handles the removal of the tokenData upon the device's next login",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Includes the tokenid for the token we need to remove",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RemoveTokenParams"
							}
						}
					}
				}
			}
		},
		"/auth/password/forgot": {
			"post": {
				"operationId": "ForgotPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Allows user to initiate a Forgot Password event.\nThis will send them an email that will allow them to reset their password.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The user only enters their email, we use that to send email and identify them",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ForgotPasswordParams"
							}
						}
					}
				}
			}
		},
		"/auth/password/reset": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Allows unauthenticated user to reset their password based on a id value sent to them via email and the /password/forgot route\nIf a reset password token is no longer valid, this endpoint is responcible for removing it",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Request should include the passwordReset token and the new password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetPasswordParams"
							}
						}
					}
				}
			}
		},
		"/beeper/status": {
			"patch": {
				"operationId": "SetBeeperStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Users use this to set if they are beeping or not\nIt also allows them to update their rates and mask settings",
				"tags": [
					"Beeper"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- client sends rates, isBeeping status, mask setting, and capacity",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetBeeperStatusParams"
							}
						}
					}
				}
			}
		},
		"/beeper/queue": {
			"get": {
				"operationId": "GetBeeperQueue",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/GetBeeperQueueResult"
										}
									]
								}
							}
						}
					}
				},
				"description": "User calls this to get there queue when beeping.\nOur Socket server is responcible for telling a client a change occoured, it will prompt\na call to this endpoint to get the queue and data",
				"tags": [
					"Beeper"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/beeper/queue/status": {
			"patch": {
				"operationId": "SetBeeperQueue",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "A beeper calls this to set the status of one entry in their queue",
				"tags": [
					"Beeper"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- beeper sends the status they want to set, the rider's id, and the queue entry id",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetBeeperQueueParams"
							}
						}
					}
				}
			}
		},
		"/beeps": {
			"get": {
				"operationId": "GetBeeps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/BeepsResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Allow admins to get beeps list\n\nYou can specify and offset and show to get pagination. Ex: https://ridebeep.app/v1/beeps?offset=10&show=10\n\nIf you do not specify an offset or a show ammount, the API will return EVERY beep event",
				"tags": [
					"Beeps"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "where to start in the DB",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "how many to show from start",
						"in": "query",
						"name": "show",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/beeps/{id}": {
			"get": {
				"operationId": "GetBeep",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/BeepResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get a beep entry\n\nAn admin can get the details of a single beep",
				"tags": [
					"Beeps"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/directions/{start}/{end}": {
			"get": {
				"operationId": "GetDirections",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Directions"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "start",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "end",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/docs": {
			"get": {
				"operationId": "GetDocs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"Docs"
				],
				"security": [],
				"parameters": []
			}
		},
		"/files/upload": {
			"post": {
				"operationId": "UploadFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ProfilePhotoResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Files"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/reports": {
			"post": {
				"operationId": "ReportUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Report a user",
				"tags": [
					"Reports"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReportUserParams"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetReports",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ReportsResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Allow admins to get reports made by users\n\nYou can specify and offset and show to get pagination. Ex: https://ridebeep.app/v1/reports?offset=10&show=10\n\nIf you do not specify an offset or a show ammount, the API will return EVERY report",
				"tags": [
					"Reports"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "where to start in the DB",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "how many to show from start",
						"in": "query",
						"name": "show",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/reports/{id}": {
			"patch": {
				"operationId": "UpdateReport",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Edit a report entry\n\nAn admin can mark the report as handled and add notes",
				"tags": [
					"Reports"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- user can send any or all update report params",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateReportParams"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetReport",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ReportResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get a report entry\n\nAn admin can get the details of a single report",
				"tags": [
					"Reports"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteReport",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Delete a report entry by id",
				"tags": [
					"Reports"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/rider/choose": {
			"patch": {
				"operationId": "ChooseBeep",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ChooseBeepResponse"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "A user can use this 'rider' endpoint to to choose a beep to join their queue\nThis endpoint handles inserting into the queue table and updating user fields",
				"tags": [
					"Rider"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The client must send their groupSize, origin and destination, and the beepersid",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChooseBeepParams"
							}
						}
					}
				}
			}
		},
		"/rider/find": {
			"get": {
				"operationId": "FindBeep",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/ChooseBeepResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "The endpoint will serve the user with data of the most avalible beeper\nThis will NOT initiate a beep, but will simplily give the client data of an avalible beeper",
				"tags": [
					"Rider"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/rider/status": {
			"get": {
				"operationId": "GetRiderStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/RiderStatusResult"
										}
									]
								}
							}
						}
					}
				},
				"description": "Gets the current status as a rider at any given time. This is how they know anything about their current beep\nOur socket currently will tell clients a change happend, and this endpoint will be called to get the data",
				"tags": [
					"Rider"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/rider/leave": {
			"delete": {
				"operationId": "RiderLeaveQueue",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "A user can remove themselves from a queue. \nWe send beepersID so we can perfrom one less query to find that value",
				"tags": [
					"Rider"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/rider/list": {
			"get": {
				"operationId": "GetBeeperList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/BeeperListResult"
										}
									]
								}
							}
						}
					}
				},
				"description": "Provides client with a list of all people currently beeping",
				"tags": [
					"Rider"
				],
				"security": [],
				"parameters": []
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UserResult"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get public information about any user by providing their user id,\nif user has admin permission (auth is OPTIONAL), they will get more personal information about the user",
				"tags": [
					"Users"
				],
				"security": [
					{
						"optionalAdmin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "RemoveUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Delete an account by user id",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "EditUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Edit a user account",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- user can send any or all account params",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditUserParams"
							}
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UsersResult"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get a list of every Beep App User for admins.\n\nYou can specify and offset and show to get pagination. Ex: https://ridebeep.app/v1/users?offset=10&show=10\n\nIf you do not specify an offset or a show ammount, the API will return EVERY user",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "where to start in the DB",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "how many to show from start",
						"in": "query",
						"name": "show",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/history/rider": {
			"get": {
				"operationId": "GetRideHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/RiderHistoryResult"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get all of the rides of this user in the history table",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/{id}/history/beeper": {
			"get": {
				"operationId": "GetBeepHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{
											"$ref": "#/components/schemas/BeeperHistoryResult"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get all of the beeps of this user in the history table",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/{id}/queue": {
			"get": {
				"operationId": "GetQueue",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/APIResponse"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "User calls this to get there queue when beeping.\nOur Socket server is responcible for telling a client a change occoured, it will prompt\na call to this endpoint to get the queue and data",
				"tags": [
					"Users"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/account": {
			"patch": {
				"operationId": "EditAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Edit your user account",
				"tags": [
					"Account"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- user should send full account data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditAccountParams"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Delete your own user account",
				"tags": [
					"Account"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		},
		"/account/password": {
			"post": {
				"operationId": "ChangePassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Change your password when authenticated with this endpoint",
				"tags": [
					"Account"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- user should send a new password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChangePasswordParams"
							}
						}
					}
				}
			}
		},
		"/account/pushtoken": {
			"put": {
				"operationId": "UpdatePushToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Update your Push Token to a new push token to ensure mobile device gets notified by Expo",
				"tags": [
					"Account"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- user should send an Expo Push Token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePushTokenParams"
							}
						}
					}
				}
			}
		},
		"/account/verify": {
			"post": {
				"operationId": "VerifyAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/VerifyAccountResult"
										},
										{
											"$ref": "#/components/schemas/APIResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Verify your account by using the token sent to your email.",
				"tags": [
					"Account"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- user should send the token of the verify account entry",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyAccountParams"
							}
						}
					}
				}
			}
		},
		"/account/verify/resend": {
			"post": {
				"operationId": "ResendEmailVarification",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponse"
								}
							}
						}
					}
				},
				"description": "Resend a verification email to a user",
				"tags": [
					"Account"
				],
				"security": [
					{
						"token": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "https://ridebeep.app/v1"
		}
	]
}